@using System.ComponentModel
@using JoinRpg.DataModel
@model JoinRpg.Domain.CharacterFieldValue
<div class="form-group">
    <label class="control-label col-md-2">@Model.Field.FieldName</label>
    <div class="col-md-10">

        @switch (Model.Field.FieldType)
        {
            case CharacterFieldType.Text:
                <textarea class="form-control" cols="100" id="@Model.FieldClientId" name="@Model.FieldClientId" rows="4">@(Model == null ? "" : Model.Value)</textarea>
                break;
            case CharacterFieldType.Dropdown:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control">
                    @foreach (var val in Model.Field.DropdownValues)
                    {
                        <option value="@val.ProjectCharacterFieldDropdownValueId" @(val.ProjectCharacterFieldDropdownValueId.ToString() == Model.Value ? "selected='selected'" : "")>@val.Label</option>
                    }
                </select>
                break;
            case CharacterFieldType.String:
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" value="@Model.Value" type="text" class="form-control">
                break;
            case CharacterFieldType.Number:
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" value="@Model.Value" type="number" class="form-control">
                break;
            case CharacterFieldType.Checkbox:
                var ch = Model.Value == "1" ? "checked" : "";
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" type="checkbox" @ch class="form-control">
                break;
            case CharacterFieldType.MultiSelect:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control" multiple="multiple">
                    @foreach (var val in Model.Field.DropdownValues)
                    {
                        <option value="@val.ProjectCharacterFieldDropdownValueId" @(val.ProjectCharacterFieldDropdownValueId.ToString() == Model.Value ? "selected='selected'" : "")>@val.Label</option>
                    }
                </select>
                break;
            default:
                throw new InvalidEnumArgumentException("Unkonwn field type name");
        }
        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
    </div>

</div>