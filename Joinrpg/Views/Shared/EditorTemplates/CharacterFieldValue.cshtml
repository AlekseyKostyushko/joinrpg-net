@using System.ComponentModel
@using JoinRpg.DataModel
@using JoinRpg.Web.Helpers
@model JoinRpg.Domain.CharacterFieldValue
<div class="form-group">
    <label class="control-label col-md-2">@Model.Field.FieldName</label>
    <div class="col-md-10">

        @switch (Model.Field.FieldType)
        {
            case CharacterFieldType.Text:
                <textarea class="form-control" cols="100" id="@Model.FieldClientId" name="@Model.FieldClientId" rows="4">@(Model == null ? "" : Model.Value)</textarea>
                break;
            case CharacterFieldType.Dropdown:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control">
                    @{
                        var isEmpty = string.IsNullOrWhiteSpace(Model.Value);
                    @*if (isEmpty || !Model.Field.IsRequired)*@
                        if (true)
                        {
                            <option value="" @(isEmpty ? "selected='selected'" : "")>(не установлено)</option>
                        }
                        foreach (var val in Model.Field.DropdownValues)
                        {
                            <option value="@val.ProjectCharacterFieldDropdownValueId"
                                    @(val.ProjectCharacterFieldDropdownValueId.ToString() == Model.Value ? "selected='selected'" : "")
                                    title='@val.Description.ToHtmlString()'>
                                @val.Label
                            </option>
                        }
                    }
                </select>
                break;
            case CharacterFieldType.String:
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" value="@Model.Value" type="text" class="form-control">
                break;
            case CharacterFieldType.Checkbox:
                var ch = Model.Value == "on" ? "checked" : "";
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" type="checkbox" @ch>
                break;
            case CharacterFieldType.MultiSelect:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control" multiple="multiple">
                    @foreach (var val in Model.Field.DropdownValues)
                    {
                        <option value="@val.ProjectCharacterFieldDropdownValueId"
                                @(val.ProjectCharacterFieldDropdownValueId.ToString() == Model.Value ? "selected='selected'" : "")
                                title='@val.Description.ToHtmlString()'>
                            @val.Label
                        </option>
                    }
                </select>
                <p class="help-block">Используйте Ctrl, чтобы выбрать несколько значений.</p>
                break;
            default:
                throw new InvalidEnumArgumentException("Unknown field type name");
        }
        @if (!string.IsNullOrWhiteSpace(Model.Field.FieldHint.Contents))
        {
            <div class="help-block">@Html.DisplayFor(model => model.Field.FieldHint.Contents) </div>
        }
        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
    </div>

</div>