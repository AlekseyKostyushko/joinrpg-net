@using System.ComponentModel
@using JoinRpg.Web.Helpers
@using JoinRpg.Web.Models
@model FieldValueViewModel

@helper ShowOptions()
{
    var selectedValues = Model.ValueList;
    foreach (var val in Model.PossibleValueList)
    {
        <option value="@val.ProjectFieldDropdownValueId"
                @(selectedValues.Contains(val) ? "selected='selected'" : "")
                title='@val.Description.ToHtmlString()'>
            @val.Label
        </option>
    }
}
  @if (Model.FieldViewType == ProjectFieldViewType.Header)
  {
      <h4>@Model.FieldName</h4>
      <div class="help-block">
          @Html.DisplayFor(model => model.Description)
      </div>
      return;
  }
<div class="form-group">
    <label class="control-label col-md-2">@Model.FieldName

        @if (Model.FieldBound == FieldBoundToViewModel.Claim)
        {
            <span class="label label-primary"title="Это поле привязано к заявке и сохранится при смене роли">З</span>
        }
        @if (Model.FieldBound == FieldBoundToViewModel.Character)
        {
        <span class="label label-success" title="Это поле привязано к персонажу и сохранится при смене игрока.">П</span>
        }

    </label>
    <div class="col-md-10">

        @switch (Model.FieldViewType)
        {
            case ProjectFieldViewType.Text:
                <textarea class="form-control" cols="100" id="@Model.FieldClientId" name="@Model.FieldClientId" rows="4">@(Model == null ? "" : Model.Value)</textarea>
                break;
            case ProjectFieldViewType.Dropdown:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control">
                    @{
                        var isEmpty = string.IsNullOrWhiteSpace(Model.Value);
                    @*if (isEmpty || !Model.Field.IsRequired)*@
                        if (true)
                        {
                            <option value="" @(isEmpty ? "selected='selected'" : "")>(не установлено)</option>
                        }
                        @ShowOptions()
                    }
                </select>
                break;
            case ProjectFieldViewType.String:
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" value="@Model.Value" type="text" class="form-control">
                break;
            case ProjectFieldViewType.Checkbox:
                var ch = Model.Value == "on" ? "checked" : "";
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" type="checkbox" @ch>
                break;
            case ProjectFieldViewType.MultiSelect:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control" multiple="multiple">
                    @ShowOptions()

                </select>
                <p class="help-block">Используйте Ctrl, чтобы выбрать несколько значений.</p>
                break;
            default:
                throw new InvalidEnumArgumentException("Unknown field type name");
        }
        @if (!string.IsNullOrWhiteSpace(Model.Description.Contents))
        {
            <div class="help-block">@Html.DisplayFor(model => model.Description) </div>
        }
        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
    </div>

</div>