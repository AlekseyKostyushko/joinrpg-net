@model JoinRpg.Web.Models.GameFieldEditViewModel

@{
    ViewBag.Title = "Редактирование поля персонажа";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
  @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.AntiForgeryToken()
  @Html.HiddenFor(model => model.ProjectId)
  @Html.HiddenFor(model => model.ProjectCharacterFieldId)
    
    <div class="form-horizontal">

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>

            @Html.LabelFor(model => model.FieldType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DisplayFor(model => model.FieldType)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPublic)
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerView, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9"><div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerView)
                    @Html.ValidationMessageFor(model => model.CanPlayerView, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerEdit, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerEdit)
                    @Html.ValidationMessageFor(model => model.CanPlayerEdit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FieldHint, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.FieldHint, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FieldHint, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="@(Model.IsActive ? "Сохранить" : "Восстановить")" class="btn btn-success" /> @Html.ActionLink("Назад к списку полей", "Index", new { Model.ProjectId })
            </div>
        </div>
    </div>
}

@if (Model.HasValueList)
{
    <hr/>
    <p>@Html.ActionLink("Добавить значение", "CreateValue", new {Model.ProjectId, Model.ProjectCharacterFieldId})</p>
    Html.RenderPartial("ValuesList", Model.DropdownValues, null);
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
