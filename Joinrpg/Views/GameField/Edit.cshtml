@using JoinRpg.Web.App_Code
@using JoinRpg.Web.Models
@model GameFieldEditViewModel

@{
    ViewBag.Title = "Редактирование поля персонажа / заявки";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
  @Html.ValidationSummary(true, "", new { @class = "text-danger" })
  @Html.AntiForgeryToken()
  @Html.HiddenFor(model => model.ProjectId)
  @Html.HiddenFor(model => model.ProjectFieldId)
    
    <div class="form-horizontal">

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.FieldViewType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DisplayFor(model => model.FieldViewType)
            </div>
        </div>
        <div class="form-group">

            @Html.LabelFor(model => model.FieldBoundTo, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.DisplayFor(model => model.FieldBoundTo)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MandatoryStatus, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.MandatoryStatus)
                @Html.ValidationMessageFor(model => model.MandatoryStatus, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPublic)
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerView, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9"><div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerView)
                    @Html.ValidationMessageFor(model => model.CanPlayerView, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerEdit, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerEdit)
                    @Html.ValidationMessageFor(model => model.CanPlayerEdit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.ShowForUnApprovedClaim, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.ShowForUnApprovedClaim)
                    @Html.ValidationMessageFor(model => model.ShowForUnApprovedClaim, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DescriptionEditable, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.EditorFor(model => model.DescriptionEditable, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.DescriptionEditable, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShowForGroups, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.MagicSelectBindGroups(model => model.ShowForGroups)
                @Html.ValidationMessageFor(model => model.ShowForGroups, "", new {@class = "text-danger"})
                <div style="clear: left;">@Html.DescriptionFor(model => model.ShowForGroups)</div>
            </div>
        </div>
        
        @if (Model.FieldBoundTo == FieldBoundToViewModel.Character)
        {

            <div class="form-group">
                @Html.LabelFor(model => model.ValidForNpc, htmlAttributes: new {@class = "control-label col-md-3"})
                <div class="col-md-9">
                    @Html.EditorFor(model => model.ValidForNpc)
                    @Html.ValidationMessageFor(model => model.ValidForNpc, "", new {@class = "text-danger"})
                    @Html.DescriptionFor(model => model.ValidForNpc)
                </div>
            </div>
        }
        else
        {
          @Html.HiddenFor(model => model.ValidForNpc)
        }

        <div class="form-group">
            @Html.LabelFor(model => model.IncludeInPrint, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.IncludeInPrint)
                @Html.ValidationMessageFor(model => model.IncludeInPrint, "", new { @class = "text-danger" })
                @Html.DescriptionFor(model => model.IncludeInPrint)
            </div>
        </div>

        @if (Model.FieldViewType.SupportsPricing())
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Price)
                    @Html.DescriptionFor(model => model.Price)
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Price)
        }

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="@(Model.IsActive ? "Сохранить" : "Восстановить")" class="btn btn-success"/>
                @Html.ActionLink("Назад к списку полей", "Index", new { Model.ProjectId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@if (Model.HasValueList)
{

    <script type="text/javascript">

        function Delete(id, href)
        {
            var row = document.getElementById("value" + id);
            $("#valueToDeleteTitle").text(row.getAttribute("title"));
            $("#bnStartDelete").click(function () { DoDelete(id, href); });
            $("#dlgDeleteValue").modal("show");
            return false;
        }

        function DoDelete(id, href)
        {
            $("#dlgDeleteValue").modal("hide");
            var dlg = document.getElementById("dlgDeleteProgressText");
            dlg.setAttribute("class", "modal-body alert alert-info");
            dlg.innerHTML = "Удаление...";
            $("#dlgDeleteProgress").modal("show");

            var valueId = "value" + id;
            var row = document.getElementById(valueId);

            var xr = new XMLHttpRequest();

            // called when action finished
            function load()
            {
                if (xr.status >= 300)
                {
                    error();
                    return;
                }

                dlg.setAttribute("class", dlg.getAttribute("class").replace("-info", "-success"));
                $("#dlgDeleteProgress").modal({ keyboard: true });
                if (xr.status == 250)
                {
                    dlg.innerHTML = "Значение помечено как неактивное";
                    var btn = document.getElementById(valueId + "DeleteButton");
                    btn.remove();
                    btn = document.getElementById(valueId + "EditButton");
                    btn.setAttribute("title", "Восстановить");
                    btn.firstElementChild.setAttribute("class", btn.firstElementChild.getAttribute("class").replace("-pencil", "-heart"));
                }
                else if (xr.status == 200)
                {
                    dlg.innerHTML = "Успешно удалено";                    
                }
                else
                {
                    dlg.setAttribute("class", dlg.getAttribute("class").replace("-info", "-warning"));
                    dlg.innerHTML = "Сервер ответил неизвестным кодом";
                }
                setTimeout(function ()
                {
                    $("#dlgDeleteProgress").modal("hide");
                    if (xr.status != 250)
                        location.reload();
                }, 1000);
            }

            // called if any error occured
            function error()
            {
                dlg.setAttribute("class", dlg.getAttribute("class").replace("-info", "-danger"));
                dlg.innerHTML = "Не удалось удалить";                
                $("#dlgDeleteProgress").modal({ keyboard: true });
                setTimeout(function ()
                {
                    $("#dlgDeleteProgress").modal("hide");
                    location.reload();
                }, 5000);
            }

            xr.addEventListener("load", load);
            xr.addEventListener("error", error);
            xr.addEventListener("abort", error);

            xr.open("DELETE", href, true);
            xr.send();
        }


    </script>


    <hr />
    <div>
        <a href="@Url.Action("CreateValue", new {Model.ProjectId, Model.ProjectFieldId})"
            class="btn btn-default"><i class="glyphicon glyphicon-plus"></i>Добавить значение</a>
        <button class="btn btn-default" data-toggle="modal" data-target="#massAddValueModal">Добавить несколько значений</button>
    </div>
    Html.RenderPartial("ValuesList", Model.DropdownValues, null);
}

<!-- Deletion dialog -->
<div id="dlgDeleteValue" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Удалить значение?</h4>
            </div>

            <div class="modal-body">
                <div class="join alert alert-warning"><i class="glyphicon glyphicon-question-sign"></i>Удалить значение «<span id="valueToDeleteTitle"></span>»?</div>
                <div class="join alert alert-info">Если значение использовалось хотя бы один раз, его можно будет восстановить</div>
            </div>

            <div class="modal-footer">
                <button id="bnStartDelete" type="button" class="btn btn-danger">Удалить</button>
                <button id="bnCancelDelete" type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    </div>
</div>

<!-- Deletion progress dialog -->
<div id="dlgDeleteProgress" class="modal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="dlgDeleteProgressText" class="modal-body alert alert-info" style="margin: 0;">Удаляем...</div>            
        </div>
    </div>
</div>

<!-- Mass addition dialog -->
<div class="modal fade" id="massAddValueModal" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      @using (Html.BeginForm("MassCreateValueVariants", "GameField"))
      {
        @Html.HiddenFor(model => model.ProjectId)
        @Html.HiddenFor(model => model.ProjectFieldId)
        @Html.AntiForgeryToken()
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Добавить значения</h4>
        </div>

        <div class="modal-body">
          <div class="form-horizontal">
            <div class="form-group">
              <div class="col-md-10">
              <textarea type="text" required id="valuesToAdd" name="valuesToAdd" rows="4" class="form-control"></textarea>
                <div class="help-block">Введите сюда значения, которые хотите добавить этому полю. <br/> Одна строчка — одно значение</div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-footer">
          <button type="submit" class="btn btn-success">Добавить</button>
          <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>

        </div>
      }
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
