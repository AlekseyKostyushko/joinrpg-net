@using JoinRpg.Web.App_Code
@using JoinRpg.Web.Models
@model IEnumerable<GameFieldEditViewModel>

@helper ShowFieldRow(GameFieldEditViewModel item)
{
  <tr>
    <td>
      <b class="@(item.IsActive ? "" : "deleted")">@Html.DisplayFor(modelItem => item.Name)</b>
      @Html.DisplayFor(modelItem => item.MandatoryStatus)
      <br/>
      @Html.DisplayNameFor(model => model.FieldViewType)
      @Html.DisplayFor(modelItem => item.FieldViewType)
      @Html.DisplayNameFor(model => model.FieldBoundTo)
      @Html.DisplayFor(model => item.FieldBoundTo)
    </td>
    <td>
      @if (item.IsPublic)
      {
        <span class="label label-primary">Публичное</span>
      }
      else if (item.CanPlayerView)
      {
        <span class="label label-info">Игроку</span>
      }
      else
      {
        <span class="label label-default">Только мастерам</span>
      }
      <br/>
      @if (item.CanPlayerEdit)
      {
        <span class="label label-warning">Игрок может менять</span>
      }
    </td>
    <td>
      @item.DescriptionDisplay
    </td>
    <td>
      @if (item.HasValueList)
      {
        <ul>
          @foreach (var value in item.DropdownValues)
          {
            <li>
              @if (value.CharacterGroupId != null)
              {
                @Html.ActionLink(value.Label, "ByGroup", "CharacterList", new {item.ProjectId, value.CharacterGroupId}, null)
              }
              else
              {
                @value.Label
              }
            </li>
          }
          @if (item.MandatoryStatus != MandatoryStatusViewType.Optional && item.IsActive)
          {
            if (item.FieldBoundTo == FieldBoundToViewModel.Character)
            {
              <li>(<i>@Html.ActionLink("Значение не проставлено", "ByUnAssignedField", "CharacterList",
                        new {item.ProjectFieldId, item.ProjectId}, null)</i>)</li>
            }
            else
            {
              <li>(<i>@Html.ActionLink("Значение не проставлено", "ByUnAssignedField", "ClaimList",
                        new {item.ProjectFieldId, item.ProjectId}, null)</i>)</li>
            }
          }
        </ul>
      }
      else if (item.FieldViewType != ProjectFieldViewType.Header)
      {
        if (!item.IsActive)
        {
          switch (item.FieldBoundTo)
          {
            case FieldBoundToViewModel.Character:
              @Html.ActionLink("Отчет (проставленные)", "ByAssignedField", "CharacterList",
                new {item.ProjectFieldId, item.ProjectId}, null)
              break;
            case FieldBoundToViewModel.Claim:
              @Html.ActionLink("Отчет (проставленные)", "ByAssignedField", "ClaimList",
                new {item.ProjectFieldId, item.ProjectId}, null)
              break;
            default:
              throw new ArgumentOutOfRangeException();
          }
        }
        else
        {
          if (item.FieldBoundTo == FieldBoundToViewModel.Character)
          {
            <i>@Html.ActionLink("Отчет по непроставленным", "ByUnAssignedField", "CharacterList",
                 new {item.ProjectFieldId, item.ProjectId}, null)</i>
          }
          else
          {
            <i>@Html.ActionLink("Отчет по непроставленным", "ByUnAssignedField", "ClaimList",
                 new {item.ProjectFieldId, item.ProjectId}, null)</i>
          }
        }
      }
    </td>
    <td>

      @if (item.CanEditFields)
      {
        <br/>
        if (item.IsActive)
        {
          @Html.ActionLink("Изменить", "Edit", new {item.ProjectFieldId, item.ProjectId})
          <text>|
            @Html.ActionLink("Удалить", "Delete", new {item.ProjectFieldId, item.ProjectId})</text>
        }
        else
        {
          @Html.ActionLink("Восстановить", "Edit", new {item.ProjectFieldId, item.ProjectId})
        }
        @Html.MoveControl(model => item, "Move")
      }
    </td>
  </tr>
}

@{
  var firstItem = Model.FirstOrDefault();
}
@if (firstItem != null)
{
  <table class="table" style="margin-top: 1em">
    <tr>
      <th>
        <b>Поле</b>
      </th>
      <th>
        <b>Видимость</b>
      </th>
      <th>
        @Html.DisplayNameFor(model => model.DescriptionDisplay)
      </th>
      <th></th>
      <th></th>
    </tr>

    @foreach (var item in Model)
    {
      @ShowFieldRow(item)
    }
    
  </table>
}
