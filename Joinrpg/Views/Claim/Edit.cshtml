@model ClaimViewModel

@helper ShowCommentWithTree(Comment comment)
{
    if (!comment.IsVisibleToPlayer && !Model.HasMasterAccess)
    {
        return;
    }
    var hideClassName = !comment.IsVisibleToPlayer ? "world-object-hidden" : "";
    <div class="@hideClassName">
        @if (comment.IsCommentByPlayer)
        {
            <span>Игрок</span>
        }
        else
        {
            <span>Мастер</span>
        }
        @Html.DisplayFor(model => comment.Author) написал(а) @Html.DisplayFor(c => comment.CreatedTime, "EventTime")
        <strong>
            @if (!comment.IsCommentByPlayer)
            {
                if (comment.IsVisibleToPlayer)
                {
                <span>игроку</span>
                }
                else
                {
                <span>другим мастерам</span>
                }
            }
        </strong>
        <span>@comment.CommentText.ToHtmlString()</span>
        <details>
            <summary>Ответить...</summary>

            @using (Html.BeginForm("Create", "Comment", FormMethod.Post, new {enctype = "multipart/form-data"}))
            {
                @Html.Partial("AddCommentPartial", new AddCommentViewModel
                {
                    ProjectId = Model.ProjectId,
                    ClaimId = Model.ClaimId,
                    ParentCommentId = comment.CommentId,
                    EnableHideFromUser = !Model.IsMyClaim,
                    HideFromUser = !comment.IsVisibleToPlayer
                })
            }
        </details>
        <div style="margin-left: 1em; margin-top: 1em">
            @foreach (var childComment in comment.ChildsComments)
            {
                @ShowCommentWithTree(childComment)
            }
        </div>
        <hr/>
    </div>
}
@helper OtherClaimsForThisCharacterLink()
{
    @Html.ActionLink("заявки от других игроков", "Details", "Character",
        new {Model.CharacterId, Model.ProjectId}, null)
}
@helper OtherClaimsForThisPlayerLink()
{
    @Html.ActionLink(Model.OtherClaimsFromThisPlayerCount + " заявки(ок)", "ForPlayer", "Claim",
        new {Model.ProjectId, Model.Player.UserId}, null)
}


@using JoinRpg.DataModel
@using JoinRpg.Web.Helpers
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.CommonTypes

<div>
@Html.Partial("CharacterNavigation", Model.Navigation)
<dl class="dl-horizontal">
    <dt>
        @Html.DisplayNameFor(model => model.Player)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Player)
    </dd>
    @if (Model.CharacterGroupId != null)
    {
        <dt>
            @Html.DisplayNameFor(model => model.GroupName)
        </dt>

        <dd>
            @Html.ActionLink(Model.GroupName, "Index", "GameGroups", new {Model.CharacterGroupId, Model.ProjectId}, null)
        </dd>
    }
    <dt>
        @Html.DisplayNameFor(model => model.Description)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Description)
    </dd>
    @if (Model.ParentGroups != null)
    {
        <dt>@Html.DisplayNameFor(model => model.ParentGroups)</dt>
        <dd>@Html.DisplayFor(model => model.ParentGroups)</dd>
    }
    @if (Model.HasMasterAccess)
    {
        <dt>
            @Html.DisplayNameFor(model => model.ResponsibleMasterId)
        </dt>
        <dd>
            @using (Html.BeginForm("ChangeResponsible", "Claim"))
            {
            <div class="form-inline">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.ProjectId)
                @Html.HiddenFor(model => model.ClaimId)
                @Html.DropDownListFor(
                    model => model.ResponsibleMasterId,
                    Model.Masters.Select(master => new SelectListItem() { Text = master.Name, Value = master.Id }),
                    htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.ResponsibleMasterId, "", new { @class = "text-danger" })
                <input type="submit" value="Изменить" class="btn btn-default" />
            </div>
            }
        </dd>
    }
</dl>
@if (Model.HasApproveRejectClaim)
{
    if (Model.Status == Claim.Status.AddedByUser)
    {
        if (Model.OtherClaimsForThisCharacterCount > 0)
        {
            <p>Это не единственная заявка на этого персонажа. Прежде чем принимать эту заявку, отклоните @OtherClaimsForThisCharacterLink()
                или переведите их на другого персонажа или в группу.</p>
        }
        else
        {
            <details>
                <summary>Принять заявку...</summary>
                @if (Model.OtherClaimsFromThisPlayerCount > 0)
                {
                    <p>
                        Также этим же игроком подано на этот проект еще @OtherClaimsForThisPlayerLink().
                        Если принять эту заявку, другие автоматически будут отклонены.
                    </p>
                }
                @using (Html.BeginForm("ApproveByMaster", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                {
                    @Html.Partial("AddCommentPartial", new AddCommentViewModel
                    {
                        ProjectId = Model.ProjectId,
                        ClaimId = Model.ClaimId,
                        ParentCommentId = null,
                        EnableHideFromUser = false,
                        HideFromUser = false,
                        ActionName = "Принять заявку"
                    })
                    <p>Приняв заявку, вы сообщаете игроку, что роль за ним, вы не рассматриваете другие заявки и он может спокойно готовиться.</p>
                }
            </details>
        }
    }
    if (Model.Status == Claim.Status.AddedByUser || Model.Status == Claim.Status.Approved)
    {
        <details>
            <summary>Отклонить заявку...</summary>
            @using (Html.BeginForm("DeclineByMaster", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
            {
                @Html.Partial("AddCommentPartial", new AddCommentViewModel
                {
                    ProjectId = Model.ProjectId,
                    ClaimId = Model.ClaimId,
                    ParentCommentId = null,
                    EnableHideFromUser = false,
                    HideFromUser = false,
                    ActionName = "Отклонить заявку"
                })
                if (Model.Status == Claim.Status.AddedByUser)
                {
                    <p>При отклонении заявки важно объяснить игроку причины отказа. Возможно, игроку будет приятнее, если вы вместо отклонения заявки предложите ему альтернативную роль,
                        воспользовавшись функцией перевода заявки на другую роль/группу.</p>
                }
                else
                {
                    <p>Добавьте разумный текст, объясняющий причины отклонения заявки.</p>
                }
            }
        </details>
        <details>
            <summary>Переместить заявку</summary>
            @using (Html.BeginForm("Move", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
            {
                if (Model.Status == Claim.Status.Approved)
                {
                    <p>Принятую заявку можно переместить только на конкретную роль (нельзя переместить в локацию)</p>
                    ViewBag.ShowGroupsInAvailClaim = false;
                }
                else
                {
                    ViewBag.ShowGroupsInAvailClaim = true;
                }
                @Html.Partial("AvailClaimTargetsPartial", Model.Data)
                @Html.Partial("AddCommentPartial", new AddCommentViewModel
                {
                    ProjectId = Model.ProjectId,
                    ClaimId = Model.ClaimId,
                    ParentCommentId = null,
                    EnableHideFromUser = false,
                    HideFromUser = false,
                    ActionName = "Переместить заявку"
                })
            }
        </details>
    }
    if ((Model.Status == Claim.Status.DeclinedByMaster || Model.Status == Claim.Status.DeclinedByUser))
    {
        <details>
            <summary>Восстановить заявку</summary>

            @if (Model.OtherClaimsFromThisPlayerCount > 0)
            {
                <p>
                    Также этим же игроком подано на этот проект еще @OtherClaimsForThisPlayerLink().
                    Отклоните другие заявки, прежде чем восстанавливать эту.
                </p>
            }
            else
            {
                using (Html.BeginForm("RestoreByMaster", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                {
                    @Html.Partial("AddCommentPartial", new AddCommentViewModel
                    {
                        ProjectId = Model.ProjectId,
                        ClaimId = Model.ClaimId,
                        ParentCommentId = null,
                        EnableHideFromUser = false,
                        HideFromUser = false,
                        ActionName = "Восстановить заявку"
                    })
                    if (Model.HasOtherApprovedClaim)
                    {
                        <p>
                            На этого персонажа есть другие утвержденные @OtherClaimsForThisCharacterLink().
                            При восстановлении эта заявка будет автоматически перенесена в корневую локацию.
                        </p>
                    }
                }
            }
        </details>
    }
    if (Model.CanAcceptCash)
    {
        var viewModel = new AcceptCashViewModel
        {
            ProjectId = Model.ProjectId,
            ClaimId = Model.ClaimId,
            ParentCommentId = null,
            EnableHideFromUser = false,
            HideFromUser = false,
            ActionName = "Отметить взнос",
            OperationDate = DateTime.Today
        };
        @Html.Partial("_ClaimFinancePartial", viewModel)
    }
}
@if (Model.IsMyClaim)
{
    if (Model.Status == Claim.Status.AddedByUser || Model.Status == Claim.Status.Approved)
    {
        <details>
            <summary>Отозвать заявку...</summary>
            @using (Html.BeginForm("DeclineByPlayer", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
            {
                @Html.Partial("AddCommentPartial", new AddCommentViewModel
                {
                    ProjectId = Model.ProjectId,
                    ClaimId = Model.ClaimId,
                    ParentCommentId = null,
                    EnableHideFromUser = false,
                    HideFromUser = false,
                    ActionName = "Отозвать заявку",
                    CommentText = new MarkdownViewModel("Извините, я передумал ехать")
                })
            }
        </details>
    }
}

<hr/>
@if (Model.Fields.CharacterFields.Any())
{
    <h4>Поля персонажа</h4>
    <div class="form-horizontal">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            @Html.Partial("_EditFieldsPartial", Model.Fields)

            if (Model.Fields.AnyFieldEditable)
            {
                <div class="form-group">
                    <div class="col-md-10">
                        <input type="submit" value="Сохранить" class="btn btn-default"/>
                    </div>
                </div>
            }
        }
        <hr/>
    </div>
}

<details>
    <summary>Оставить комментарий...</summary>

    @using (Html.BeginForm("Create", "Comment", FormMethod.Post, new {enctype = "multipart/form-data"}))
    {
        @Html.Partial("AddCommentPartial", new AddCommentViewModel
        {
            ProjectId = Model.ProjectId,
            ClaimId = Model.ClaimId,
            ParentCommentId = null,
            EnableHideFromUser = !Model.IsMyClaim,
            HideFromUser = false
        })
    }
</details>

<details open>
    <summary>Комментарии к заявке</summary>
    @foreach (var comment in Model.Comments.Where(comment => comment.IsVisibleToPlayer || Model.HasMasterAccess))
    {
        @ShowCommentWithTree(comment)
    }
</details>
</div>
@Html.Partial("_PlotForCharacterPartial", Model.Plot)
