@using JoinRpg.DataModel
@using JoinRpg.Domain
@using JoinRpg.Web.Models.Accommodation
@model ClaimAccommodationViewModel

@if (!Model.AccommodationEnabled)
{
    return;
}
<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">
        <h5>Проживание</h5>
    </div>
    <div class="panel-body">
        @if (Model.AccommodationRequest == null)
        {
            <span>Тип проживания не выбран.</span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Выбрать...
            </button>
        }
        else
        {
            var roomFreeSpace = 0;
            IReadOnlyCollection<User> neighbors = new User[] {};

            <span>
                @Model.AccommodationRequest.AccommodationType.Name
                (@DisplayCount.OfX(Model.AccommodationRequest.AccommodationType.Capacity, "место", "места", "мест") в номере, @Model.AccommodationRequest.AccommodationType.Cost &#8381;)
            </span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Изменить....
            </button>
            <div class="help-block">
                @Model.AccommodationRequest.AccommodationType.Description
            </div>
            if (Model.AccommodationRequest.Accommodation != null)
            {
                <hr />
                <span> Назначена комната: <b>@Model.AccommodationRequest.Accommodation.Name</b></span>

                neighbors = Model.AccommodationRequest.Accommodation.Inhabitants.SelectMany(i => i.Subjects).Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.Accommodation.GetRoomFreeSpace();
            }
            else if (Model.AccommodationRequest.Subjects.Count > 1)
            {

                neighbors = Model.AccommodationRequest.Subjects.Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
            }

            if (roomFreeSpace > 0 || neighbors.Any())
            {
                <br />
                <b>Соседи по комнате:</b>
                <ul>
                    @foreach (var neighbor in neighbors)
                    {
                        <li>@Html.DisplayFor(model => neighbor)</li>
                    }
                    @if (roomFreeSpace > 0)
                    {
                        <li>@DisplayCount.OfX(roomFreeSpace, " свободное место", "свободных места", "свободных мест")</li>
                    }
                </ul>
            }

        }
    </div>
</div>

<div class="modal fade" id="changeAccommodationType" tabindex="-1" role="dialog">
    <div class="modal-dialog">
    @using (Html.BeginForm("PostAccommodationRequest", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
    {
        <div class="modal-content">
            <div class="modal-header">
                Возможные варианты проживания
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                @if (Model.AccommodationRequest != null)
                {
                    if (Model.AccommodationRequest.Accommodation != null)
                    {
                        <div class="alert alert-warning">
                            Вам уже назначена комната. Смена типа проживания выселит вас.
                        </div>
                    }
                    else if (Model.AccommodationRequest.Subjects.Count > 1)
                    {
                        <div class="alert alert-warning">
                            Смена типа проживания отменит существующие договоренности о совместном проживании.
                        </div>
                    }
                }
                @Html.AntiForgeryToken()
                @foreach (var accommodationType in Model.AvailableAccommodationTypes)
                {
                    var checkedState = "";
                    if (Model.AccommodationRequest != null && Model.AccommodationRequest.AccommodationType == accommodationType)
                    {

                        checkedState = "checked";
                    }
                    <div class="radio" style="margin-bottom: 2em;">
                        <label>
                            <input type="radio" name="AccommodationTypeId" id="accomodationType @accommodationType.Id" value="@accommodationType.Id" @checkedState>
                            @accommodationType.Name (@accommodationType.Capacity места, @accommodationType.Cost рублей)<br/>
                            @accommodationType.Description
                        </label>
                    </div>
                }
                  
                
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" type="submit">Сохранить проживание</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    }
    </div>
</div>
