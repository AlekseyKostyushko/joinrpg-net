@using JoinRpg.DataModel
@using JoinRpg.Domain
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.Accommodation
@model ClaimAccommodationViewModel

@if (!Model.AccommodationEnabled)
{
    return;
}

@if (Model.IncomingInvite.Any())
{
    <div class="panel panel-default" id="incomingInvite">
        <div class="panel-heading">Приглашения к совместному проживанию</div>
        <div class="panel-body">
            <table class="table">

                @{
                    var incomingTrClassName = "";
                }
                @foreach (var accommodationInvite in Model.IncomingInvite)
                {
                    switch (@accommodationInvite.IsAccepted)
                    {
                        case AccommodationRequest.InviteState.Unanswered:
                            incomingTrClassName = "text-info";
                            break;
                        case AccommodationRequest.InviteState.Accepted:
                            incomingTrClassName = "text-success";
                            break;
                        case AccommodationRequest.InviteState.Declined:
                            incomingTrClassName = "text-danger";
                            break;
                        case AccommodationRequest.InviteState.Canceled:
                            incomingTrClassName = "text-warning";
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                    <tr>
                        <td>@Html.DisplayFor(model => accommodationInvite.To.Player)</td>
                        @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                        {
                            <td>
                                <div style="display: flex">
                                    @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                                    {
                                        using (Html.BeginForm("AcceptInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("InviteId", accommodationInvite.Id)
                                            @Html.Hidden("InviteState", AccommodationRequest.InviteState.Accepted)
                                            <button class="btn  btn-xs"><i class="glyphicon glyphicon-check text-success"></i> принять</button>
                                        }
                                    }
                                    <div style="width: 10px"></div>
                                    @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                                    {
                                        using (Html.BeginForm("DeclineInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("InviteId", accommodationInvite.Id)
                                            @Html.Hidden("InviteState", AccommodationRequest.InviteState.Declined)
                                            <button class="btn btn-xs"><i class="glyphicon glyphicon-ban-circle text-danger"></i> отклонить</button>
                                        }
                                    }
                                </div>
                            </td>
                        }
                        else
                        {
                            <td class="@incomingTrClassName"> @accommodationInvite.ResolveDescription </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
}
<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">
        <h5>Проживание</h5>
    </div>
    <div class="panel-body">
        @if (Model.AccommodationRequest == null)
        {
            <span>Тип проживания не выбран.</span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Выбрать...
            </button>
        }
        else
        {
            var roomFreeSpace = 0;
            IReadOnlyCollection<User> neighbors = new User[] {};

            <span>
                @Model.AccommodationRequest.AccommodationType.Name
                (@DisplayCount.OfX(Model.AccommodationRequest.AccommodationType.Capacity, "место", "места", "мест") в номере, @Model.AccommodationRequest.AccommodationType.Cost &#8381;)
            </span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Изменить....
            </button>
            <div class="help-block">
                @Model.AccommodationRequest.AccommodationType.Description
            </div>
            if (Model.AccommodationRequest.Accommodation != null)
            {
                <hr/>
                <span> Назначена комната: <b>@Model.AccommodationRequest.Accommodation.Name</b></span>

                neighbors = Model.AccommodationRequest.Accommodation.Inhabitants.SelectMany(i => i.Subjects).Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.Accommodation.GetRoomFreeSpace();
            }
            else
            {
                neighbors = Model.AccommodationRequest.Subjects.Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.AccommodationType.Capacity - neighbors.Count;
            }

            if (roomFreeSpace > 0 || neighbors.Any())
            {
                <br/>
                <b>Соседи по комнате:</b>
                <ul>
                    @foreach (var neighbor in neighbors)
                    {
                        <li>@Html.DisplayFor(model => neighbor)</li>
                    }
                    @if (roomFreeSpace > 0)
                    {
                        <li>@DisplayCount.OfX(roomFreeSpace, " свободное место", "свободных места", "свободных мест")</li>
                    }
                </ul>
            }
            if (roomFreeSpace == 0)
            {
                <br/>
                <b>Ваша комната полностью занята, послать новые приглашения невозможно</b>
            }

            if (!Model.PotentialNeighbors.Any())
            {
                <b>Потенциальных соседей не найдено</b>
            }


            if (Model.PotentialNeighbors.Any() && roomFreeSpace > 0)
            {
                using (Html.BeginForm("Invite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                {
                    @Html.HiddenFor(model => model.ProjectId)
                    @Html.HiddenFor(model => model.ClaimId)
                    @Html.Hidden("RequestId", Model.AccommodationRequest.Id)
                    @Html.AntiForgeryToken()

                    @Html.SearchableDropdown("ReceiverClaimId", Model.PotentialNeighbors
                        .Where(neighbor => neighbor.Type != NeighborType.Current)
                        .Select(
                            neighbor =>
                                new ImprovedSelectListItem()
                                {
                                    Value = neighbor.ClaimId.ToString(),
                                    Text = neighbor.UserName,
                                    ExtraSearch = neighbor.ClaimName,
                                    Subtext = "<br />" + neighbor.UserName + " (" + neighbor.ClaimName + " ) <br /> " + (neighbor.Type == NeighborType.NoRequest ? "еще не выбрал тип проживания" : "у вас одинаковый тип проживания")
                                }))

                    <button type="submit" class="btn btn-success btn-sm"><i class="glyphicon glyphicon-plus"></i>Пригласить</button>
                }
            }

            <hr/>
            if (Model.OutgoingInvite.Any())
            {
                var resolveSectionClassName = "";
                <b>Отправленные приглашения</b>
                <table class="table">
                    @foreach (var accommodationInvite in Model.OutgoingInvite)
                    {
                        switch (@accommodationInvite.IsAccepted)
                        {
                            case AccommodationRequest.InviteState.Unanswered:
                                resolveSectionClassName = "text-info";
                                break;
                            case AccommodationRequest.InviteState.Accepted:
                                resolveSectionClassName = "text-success";
                                break;
                            case AccommodationRequest.InviteState.Declined:
                                resolveSectionClassName = "text-danger";
                                break;
                            case AccommodationRequest.InviteState.Canceled:
                                resolveSectionClassName = "text-warning";
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        <tr>
                            <td>@Html.DisplayFor(model => accommodationInvite.To.Player)</td>
                            @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                            {
                                <td>
                                    @using (Html.BeginForm("DeclineInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("InviteId", accommodationInvite.Id)
                                        @Html.Hidden("InviteState", AccommodationRequest.InviteState.Canceled)
                                        <button class="btn btn-sm" type="submit"><i class="glyphicon glyphicon-ban-circle text-danger"></i>Отменить </button>
                                    }
                                </td>
                            }
                            else
                            {
                                <td class="@resolveSectionClassName"> @accommodationInvite.ResolveDescription </td>
                            }
                        </tr>
                    }
                </table>
            }
        }
    </div>
</div>

<div class="modal fade" id="changeAccommodationType" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        @using (Html.BeginForm("PostAccommodationRequest", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
        {
            <div class="modal-content">
                <div class="modal-header">
                    Возможные варианты проживания
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    @Html.AntiForgeryToken()
                    @foreach (var accommodationType in Model.AvailableAccommodationTypes)
                    {
                        var checkedState = "";
                        if (Model.AccommodationRequest != null && Model.AccommodationRequest.AccommodationType == accommodationType)
                        {
                            checkedState = "checked";
                        }
                        <div class="radio" style="margin-bottom: 2em;">
                            <label>
                                <input type="radio" name="AccommodationTypeId" id="accomodationType @accommodationType.Id" value="@accommodationType.Id" @checkedState>
                                @accommodationType.Name (@accommodationType.Capacity места, @accommodationType.Cost рублей)<br/>
                                @accommodationType.Description
                            </label>
                        </div>
                    }


                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" type="submit">Сохранить проживание</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                </div>
            </div>
        }
    </div>
</div>
