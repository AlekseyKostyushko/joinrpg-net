@using JoinRpg.DataModel
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.Accommodation
@model ClaimAccommodationViewModel

@if (!Model.AccommodationEnabled)
{
  return;
}

@if (Model.IncomingInvite.Any())
{
    <div class="panel panel-default" id="incomingInvite">
        <div class="panel-heading">Приглашения к совместному проживанию</div>
        <div class="panel-body">
            <table class="table">

                @{
                    var incomingTrClassName = "";
                }
                @foreach (var accommodationInvite in Model.IncomingInvite)
                {
                    switch (@accommodationInvite.IsAccepted)
                    {
                        case AccommodationRequest.InviteState.Unanswered:
                            incomingTrClassName = "alert-info";
                            break;
                        case AccommodationRequest.InviteState.Accepted:
                            incomingTrClassName = "alert-success";
                            break;
                        case AccommodationRequest.InviteState.Declined:
                            incomingTrClassName = "alert-danger";
                            break;
                        case AccommodationRequest.InviteState.Canceled:
                            incomingTrClassName = "alert-warning";
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                    <tr class="@incomingTrClassName">
                        <td>@accommodationInvite.From.Player.PrefferedName</td>
                        <td>@accommodationInvite.From.Name</td>
                        <td>@accommodationInvite.ResolveDescription</td>
                        <td>
                            <div style="display: flex">
                                @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                                {
                                    using (Html.BeginForm("AcceptInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("InviteId", accommodationInvite.Id)
                                        @Html.Hidden("InviteState", AccommodationRequest.InviteState.Accepted)
                                        <button class="btn  btn-xs"><i class="glyphicon glyphicon-check text-success"></i> принять</button>
                                    }
                                }
                                <div style="width: 10px"></div>
                                @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
                                {
                                    using (Html.BeginForm("DeclineInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("InviteId", accommodationInvite.Id)
                                        @Html.Hidden("InviteState", AccommodationRequest.InviteState.Declined)
                                        <button class="btn btn-xs"><i class="glyphicon glyphicon-ban-circle text-danger"></i> отклонить</button>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
}
<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">
        <h5>Проживание</h5>
        @if (Model.AccommodationRequest != null)
        {
            <span>
                @Model.AccommodationRequest.AccommodationType.Name (@DisplayCount.OfX(Model.AccommodationRequest.AccommodationType.Capacity, "место",  "места", "мест") в номере, @Model.AccommodationRequest.AccommodationType.Cost &#8381;)
            </span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Изменить тип
            </button>
        }
    </div>
    <div class="panel-body">
      @if (Model.AccommodationRequest == null)
      {
     !!!! @foreach (var accommodationRequests in Model.AccommodationRequests)
      {
      var className = "alert alert-warning";
      if (accommodationRequests.IsAccepted == AccommodationRequest.InviteState.Accepted)
      {
      className = "alert alert-success";
      }
      <div class="@className">
        @accommodationRequests.AccommodationType.Name (@accommodationRequests.AccommodationType.Capacity места, @accommodationRequests.AccommodationType.Cost рублей)

        @{
        var neighbors = accommodationRequests.Subjects.Where(subject => subject.ClaimId != Model.ClaimId).ToList();
        if (neighbors.Any())
        {
        <hr />
        <h5>Ваши соседи</h5>
        <table class="table">

          @foreach (var subject in accommodationRequests.Subjects.Where(subject => subject.ClaimId != Model.ClaimId))
          {
          <tr>
            <td>@subject.Player.PrefferedName</td>
            <td>@subject.Name</td>
          </tr>
          }
        </table>
        }
        }
        <hr />
        @if (accommodationRequests.Subjects.Count >= accommodationRequests.AccommodationType.Capacity)
        {
        <h5 class="text-danger">Ваша комната полностью занята, послать новые приглашения невозможно</h5>
        }
        @if (!Model.PotentialNeighbors.Any())
        {
        <h5 class="text-danger">Потенциальных соседей не найдено</h5>
        }

        @if (accommodationRequests.IsAccepted == AccommodationRequest.InviteState.Accepted && Model.PotentialNeighbors.Any() && accommodationRequests.Subjects.Count < accommodationRequests.AccommodationType.Capacity)
        {
        using (Html.BeginForm("Invite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
        {
        @Html.HiddenFor(model => model.ProjectId)
        @Html.HiddenFor(model => model.ClaimId)
        @Html.Hidden("RequestId", accommodationRequests.Id)
        @Html.AntiForgeryToken()

        @Html.SearchableDropdown("ReceiverClaimId", Model.PotentialNeighbors
        .Where(neighbor => neighbor.Type != NeighborType.Current)
        .Select(
        neighbor =>
        new ImprovedSelectListItem()
        {
        Value = neighbor.ClaimId.ToString(),
        Text = neighbor.UserName,
        ExtraSearch = neighbor.ClaimName,
        Subtext = "<br />" + neighbor.UserName + " (" + neighbor.ClaimName + " ) <br /> " + (neighbor.Type == NeighborType.NoRequest ? "еще не выбрал тип проживания" : "у вас одинаковый тип проживания")
        }))

        <button type="submit" class="btn btn-success"><i class="glyphicon glyphicon-plus"></i>Пригласить</button>
        }
        <hr />
        if (Model.OutgoingInvite.Any())
        {
        <h5>Посланные приглашения</h5>
        <table class="table">

          @{
          var trClassName = "";
          }
          @foreach (var accommodationInvite in Model.OutgoingInvite)
          {
          switch (@accommodationInvite.IsAccepted)
          {
          case AccommodationRequest.InviteState.Unanswered:
          trClassName = "alert-info";
          break;
          case AccommodationRequest.InviteState.Accepted:
          trClassName = "alert-success";
          break;
          case AccommodationRequest.InviteState.Declined:
          trClassName = "alert-danger";
          break;
          case AccommodationRequest.InviteState.Canceled:
          trClassName = "alert-warning";
          break;
          default:
          throw new ArgumentOutOfRangeException();
          }
          <tr class="@trClassName">
            <td>@accommodationInvite.To.Player.PrefferedName</td>
            <td>@accommodationInvite.To.Name</td>
            <td>@accommodationInvite.ResolveDescription</td>
            <td>
              @if (accommodationInvite.IsAccepted == AccommodationRequest.InviteState.Unanswered)
              {
              using (Html.BeginForm("DeclineInvite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
              {
              @Html.AntiForgeryToken()
              @Html.Hidden("InviteId", accommodationInvite.Id)
              @Html.Hidden("InviteState", AccommodationRequest.InviteState.Canceled)
              <button class="btn btn-xs" type="submit"><i class="glyphicon glyphicon-ban-circle text-danger"></i> отменить</button>
              }
              }
            </td>
          </tr>
          }
        </table>
        }
        }
      </div>
      }   <h5>Тип проживания не выбран.</h5>
      }
      else
      {
      <div>
        @Model.AccommodationRequest.AccommodationType.Description
      </div>
      }
    </div>
</div>

<div class="modal fade" id="changeAccommodationType" tabindex="-1" role="dialog">
    <div class="modal-dialog">
    @using (Html.BeginForm("PostAccommodationRequest", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
    {
        <div class="modal-content">
            <div class="modal-header">
                Возможные варианты проживания
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                
                @Html.AntiForgeryToken()
                @foreach (var accommodationType in Model.AvailableAccommodationTypes)
                {
                    var checkedState = "";
                    if (Model.AccommodationRequest != null && Model.AccommodationRequest.AccommodationType == accommodationType)
                    {

                        checkedState = "checked";
                    }
                    <div class="radio" style="margin-bottom: 2em;">
                        <label>
                            <input type="radio" name="AccommodationTypeId" id="accomodationType @accommodationType.Id" value="@accommodationType.Id" @checkedState>
                            @accommodationType.Name (@accommodationType.Capacity места, @accommodationType.Cost рублей)<br/>
                            @accommodationType.Description
                        </label>
                    </div>
                }
                  
                
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" type="submit">Сохранить проживание</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    }
    </div>
</div>
