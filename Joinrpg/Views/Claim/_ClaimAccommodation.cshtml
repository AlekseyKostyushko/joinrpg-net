@using JoinRpg.DataModel
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.Accommodation
@model ClaimAccommodationViewModel
<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">Поданы заявки на проживание</div>
    <div class="panel-body">
        @if (!Model.AccommodationRequests.Any())
        {
            <h5>Заявки на проживание не подавались.</h5>
        }
        @foreach (var accommodationRequests in Model.AccommodationRequests)
        {
            var className = "alert alert-warning";
            if (accommodationRequests.IsAccepted == AccommodationRequest.InviteState.Accepted)
            {
                className = "alert alert-success";
            }
            <div class="@className">
                @accommodationRequests.AccommodationType.Name (@accommodationRequests.AccommodationType.Capacity места, @accommodationRequests.AccommodationType.Cost рублей)

                @if (accommodationRequests.IsAccepted == AccommodationRequest.InviteState.Accepted)
                {
                    using (Html.BeginForm("Invite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                    {
                        @Html.HiddenFor(model => model.ProjectId)
                        @Html.HiddenFor(model=>model.ClaimId)
                        @Html.Hidden("RequestId",accommodationRequests.Id)
                        @Html.AntiForgeryToken()

                        @Html.SearchableDropdown("ReceiverClaimId", Model.PotentialNeighbors
                            .Where(neighbor => neighbor.Type != NeighborType.Current)
                            .Select(
                                neighbor =>
                                    new ImprovedSelectListItem()
                                    {
                                        Value = neighbor.ClaimId.ToString(),
                                        Text = neighbor.UserName,
                                        ExtraSearch = neighbor.ClaimName,
                                        Subtext = "<br />" + neighbor.UserName + " (" + neighbor.ClaimName + " ) <br /> " + (neighbor.Type == NeighborType.NoRequest ? "еще не выбрал тип проживания" : "у вас одинаковый тип проживания")
                                    }))

                        <button type="submit" class="btn btn-success"><i class="glyphicon glyphicon-plus"></i>Пригласить</button>
                    }
                    <hr/>
                    if (Model.OutgoingInvite.Any())
                    {
                        <h5>Посланные приглашения</h5>
                        <table>

                            @{
                                var trClassName = "";
                            }
                            @foreach (var accommodationInvite in Model.OutgoingInvite)
                            {
                                switch (@accommodationInvite.IsAccepted)
                                {
                                    case AccommodationRequest.InviteState.Unanswered:
                                        trClassName = "alert-info";
                                        break;
                                    case AccommodationRequest.InviteState.Accepted:
                                        trClassName = "alert-success";
                                        break;
                                    case AccommodationRequest.InviteState.Declined:
                                        trClassName = "alert-danger";
                                        break;
                                    case AccommodationRequest.InviteState.Canceled:
                                        trClassName = "alert-warning";
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                                <tr class="@trClassName">
                                    <td>@accommodationInvite.To.Player.PrefferedName</td>
                                    <td>@accommodationInvite.To.Name</td>
                                    <td>@accommodationInvite.ResolveDescription</td>
                                    <td><i class="glyphicon glyphicon-ban-circle text-danger"></i></td>
                                </tr>
                            }
                        </table>
                    }
                }
            </div>
        }
    </div>
</div>
<div class="panel panel-default" id="accommodationTypes">
    <div class="panel-heading">Возможные варианты проживания</div>
    <div class="panel-body">
        @using (Html.BeginForm("PostAccommodationRequest", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
        {
            @Html.AntiForgeryToken()
            foreach (var accommodationType in Model.AvailableAccommodationTypes)
            {
                var className = "";
                var checkedState = "";
                if (Model.AccommodationRequests.Any(request => request.AccommodationType == accommodationType))
                {
                    className = "alert alert-success text-success";
                    checkedState = "checked";
                }
                <div class="radio" style="margin-bottom: 2em;">
                    <label class="@className">
                        <input type="radio" name="AccommodationTypeId" id="accomodationType @accommodationType.Id" value="@accommodationType.Id" @checkedState>
                        @accommodationType.Name (@accommodationType.Capacity места, @accommodationType.Cost рублей)<br/>
                        @accommodationType.Description
                    </label>
                </div>
            }
            <button class="btn btn-default" type="submit">Сохранить проживание</button>
        }
    </div>
</div>
