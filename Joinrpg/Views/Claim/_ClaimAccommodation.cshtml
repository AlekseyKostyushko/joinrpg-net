@using JoinRpg.DataModel
@using JoinRpg.Domain
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.Accommodation
@model ClaimAccommodationViewModel

@if (!Model.AccommodationEnabledForClaim)
{
    <div class="panel panel-default" id="accommodationRequestsDisables">
        <div class="panel-heading">
            <h5>Проживание</h5>
        </div>
        <div class="panel-body">
            Дождитесь одобрения заявки или включения поселения в проекте
        </div>
    </div>
    return;
}

@Html.Partial("_ClaimIncomingInvites", Model)
<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">
        <h5>Проживание</h5>
    </div>
    <div class="panel-body">
        @if (Model.AccommodationRequest == null)
        {
            <span>Тип проживания не выбран.</span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Выбрать...
            </button>
        }
        else
        {
            var roomFreeSpace = 0;
            IReadOnlyCollection<User> neighbors;

                                 <span>
                                   @Model.AccommodationRequest.AccommodationType.Name @ShowAccomodationTypeDesc(Model.AccommodationRequest.AccommodationType)
                                 </span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Изменить...
            </button>
            <div class="help-block">
                @Model.AccommodationRequest.AccommodationType.Description
            </div>
            if (Model.AccommodationRequest.Accommodation != null)
            {
                <hr/>
                <span> Назначена комната: <b>@Model.AccommodationRequest.Accommodation.Name</b></span>

                neighbors = Model.AccommodationRequest.Accommodation.Inhabitants.SelectMany(i => i.Subjects).Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.Accommodation.GetRoomFreeSpace();
            }
            else
            {
                neighbors = Model.AccommodationRequest.Subjects.Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.AccommodationType.Capacity - neighbors.Count - 1;
            }

            if (roomFreeSpace > 0 || neighbors.Any())
            {
                <br/>
                <b>Соседи по комнате:</b>
                <ul>
                    @foreach (var neighbor in neighbors)
                    {
                        <li>@Html.DisplayFor(model => neighbor)</li>
                    }
                    @if (roomFreeSpace > 0)
                    {
                        <li>@DisplayCount.OfX(roomFreeSpace, " свободное место", "свободных места", "свободных мест")</li>
                    }
                </ul>
            }
            if (roomFreeSpace == 0)
            {
                <br/>
                <b>Ваша комната полностью занята, послать новые приглашения невозможно</b>
            }

            if (!Model.PotentialNeighbors.Any() && roomFreeSpace > 0)
            {
                <br/>
                <b>Потенциальных соседей не найдено</b>
            }


            if (Model.PotentialNeighbors.Any() && roomFreeSpace > 0)
            {
                using (Html.BeginForm("Invite", "Claim", FormMethod.Post, new {enctype = "multipart/form-data"}))
                {
                    @Html.HiddenFor(model => model.ProjectId)
                    @Html.HiddenFor(model => model.ClaimId)
                    @Html.Hidden("RequestId", Model.AccommodationRequest.Id)
                    @Html.AntiForgeryToken()

                    @Html.SearchableDropdown("ReceiverClaimId", Model.PotentialNeighbors
                        .Where(neighbor => neighbor.Type != NeighborType.Current)
                        .Select(
                            neighbor =>
                                new ImprovedSelectListItem()
                                {
                                    Value = neighbor.ClaimId.ToString(),
                                    Text = neighbor.UserName,
                                    ExtraSearch = neighbor.ClaimName,
                                    Subtext = "<br />" + neighbor.UserName + " (" + neighbor.ClaimName + " ) <br /> " + (neighbor.Type == NeighborType.NoRequest ? "еще не выбрал тип проживания" : "у вас одинаковый тип проживания")
                                }))

                    <button type="submit" class="btn btn-success btn-sm"><i class="glyphicon glyphicon-plus"></i>Пригласить</button>
                }
            }

            @Html.Partial("_ClaimOutgoingInvites", Model)
        }
    </div>
</div>

@Html.Partial("_ClaimAccommodationTypeChange", Model)
